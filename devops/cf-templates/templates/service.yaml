AWSTemplateFormatVersion: 2010-09-09


Parameters:
  Cluster:
    Type: String

  DesiredCount:
    Type: Number
    Default: 1

  LaunchType:
    Type: String
    Default: Fargate
    AllowedValues:
      - Fargate
      - EC2

  TargetGroup:
    Type: String

  SourceSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  DatabaseConnectionString:
    Type: String

  AppDomainName:
      Type: String
      Description:
        The front end domain. The api needs this to build the callback url to the cognito hosted ui

  ApiDomainName:
      Type: String
      Description:
        The api domain. The api needs this to build the callback url to the cognito hosted ui

  CognitoUserPool:
    Type: String
    Description:
      The user pool the api will use for authentication

  CognitoUserPoolDomain:
    Type: String
    Description:
      The Cognito hosted ui domain basename. The api needs it to build the hosted ui domain.

  UserPoolClient:
    Type: String
    Description:
      The user pool app client

  UserPoolClientSecret:
    Type: String
    Description:
      The user pool app client

  DocumentsBucket:
    Type: String

Conditions:
  Fargate: !Equals [ !Ref LaunchType, "Fargate" ]

  EC2: !Equals [ !Ref LaunchType, "EC2" ]


Resources:
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
            
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: accesstasks3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub arn:aws:s3:::lawing-prod-documents/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}

  FargateService:
    Type: AWS::ECS::Service
    Condition: Fargate
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SourceSecurityGroup
          Subnets: !Ref Subnets
      LoadBalancers:
        - ContainerName: lawing-api
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroup

  EC2Service:
    Type: AWS::ECS::Service
    Condition: EC2
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: lawing-api
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-lawing-api
      RequiresCompatibilities:
        - !If [ Fargate, "FARGATE", "EC2" ]
      Memory: 512
      Cpu: 256
      NetworkMode: !If [ Fargate, "awsvpc", "bridge" ]
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: lawing-api
          Image: parafernalia/baseflask:0
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref AWS::StackName
          Environment:
          - Name: AWS_DEFAULT_REGION
            Value: 'us-east-1'
          - Name: AWS_COGNITO_DOMAIN
            Value: !Join
            - ''
            - - 'https://'
              - !Ref CognitoUserPoolDomain
              - '-lawing.auth.'
              - !Ref AWS::Region
              - '.amazoncognito.com'
          - Name: AWS_COGNITO_USER_POOL_ID
            Value: !Ref CognitoUserPool
          - Name: AWS_COGNITO_USER_POOL_CLIENT_ID
            Value: !Ref UserPoolClient
          - Name: AWS_COGNITO_USER_POOL_CLIENT_SECRET
            Value: '1ek747b8mflpo2gbf5743mqd49qp6vcffbkepuq3usr68kgo2bmr'
          - Name: AWS_COGNITO_REDIRECT_URL
            Value: !Join
            - ''
            - - 'https://'
              - !Ref AppDomainName 
              - '/token'
          - Name: SQLALCHEMY_TRACK_MODIFICATIONS
            Value: 'False'
          - Name: SECRET_KEY
            Value: '3456yrtyr65!2@'
          - Name: AWS_ACCESS_KEY_ID
            Value: 'AKIAU6PIQTWIPIES5PXE'
          - Name: SQLALCHEMY_DATABASE_URI
            Value: !Ref DatabaseConnectionString
          - Name: AWS_SECRET_ACCESS_KEY
            Value: '11u36rqkurgn864ak71150bivv2jsjnjdkn0d27duemhsm8131ao'
          - Name: DOCUSIGN_OAUTH_URI
            Value: https://account.docusign.com/oauth
          - Name: DOCUSIGN_WEBHOOK_URL
            Value: !Sub '${ApiDomainName}/docusign/signed'
          - Name: AWS_S3_DOCUMENTS_BUCKET
            Value: !Ref DocumentsBucket
          PortMappings:
            - ContainerPort: 5000
              HostPort: 5000
              Protocol: tcp
      Volumes:
        - Name: my-vol

Outputs:
  Service:
    Value: !If [ Fargate, !Ref FargateService, !Ref EC2Service ]

