AWSTemplateFormatVersion: 2010-09-09


Parameters:
  Cluster:
    Type: String

  DesiredCount:
    Type: Number
    Default: 1

  LaunchType:
    Type: String
    Default: Fargate
    AllowedValues:
      - Fargate
      - EC2

  TargetGroup:
    Type: String

  SourceSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>


Conditions:
  Fargate: !Equals [ !Ref LaunchType, "Fargate" ]

  EC2: !Equals [ !Ref LaunchType, "EC2" ]


Resources:
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}

  FargateService:
    Type: AWS::ECS::Service
    Condition: Fargate
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SourceSecurityGroup
          Subnets: !Ref Subnets
      LoadBalancers:
        - ContainerName: lawing-flask-api
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroup

  EC2Service:
    Type: AWS::ECS::Service
    Condition: EC2
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: simple-app
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-lawing-flask
      RequiresCompatibilities:
        - !If [ Fargate, "FARGATE", "EC2" ]
      Memory: 512
      Cpu: 256
      NetworkMode: !If [ Fargate, "awsvpc", "bridge" ]
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: lawing-flask-api
          Image: 833120502863.dkr.ecr.us-east-1.amazonaws.com/lawing-api:1
          Essential: true
          Environment:
          - Name: SECRET_KEY
            Value: '3456yrtyr65!2@'
          - Name: AWS_ACCESS_KEY_ID
            Value: 'AKIAIRXAMWKHW6GMRH7A'
          - Name: SQLALCHEMY_DATABASE_URI
            Value: 'postgres://lawing_db_user:xUx42Ei5WKWMydzeS52h@lawing.cpl0g2bxvanv.us-east-1.rds.amazonaws.com/lawing'
          - Name: AWS_SECRET_ACCESS_KEY
            Value: 'ziKkp6tjGpgTi7QYqKJbiuQnvNaUI+3Zz+HlDKPi'
          PortMappings:
            - ContainerPort: 5000
              HostPort: 5000
              Protocol: tcp
      Volumes:
        - Name: my-vol
        


Outputs:
  Service:
    Value: !If [ Fargate, !Ref FargateService, !Ref EC2Service ]

